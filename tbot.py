import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

BOT_TOKEN = os.getenv('BOT_TOKEN')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å–Ω—ã–π –±–æ—Ç!
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏."""

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    keyboard = [
        ["üéØ –£—Å–ª—É–≥–∏", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
        ["‚ÑπÔ∏è –û –Ω–∞—Å", "üÜò –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üéØ –£—Å–ª—É–≥–∏":
        services_text = """–ù–∞—à–∏ —É—Å–ª—É–≥–∏:

‚Ä¢ ü§ñ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–æ–≤
‚Ä¢ üåê –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–æ–≤
‚Ä¢ üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ üíº –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"""

        services_keyboard = [
            ["ü§ñ –ë–æ—Ç—ã", "üåê –°–∞–π—Ç—ã"],
            ["üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(services_keyboard, resize_keyboard=True)
        await update.message.reply_text(services_text, reply_markup=reply_markup)
    
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
            "üìß Email: example@mail.ru\n"
            "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 XXX XXX-XX-XX\n"
            "üåê –°–∞–π—Ç: example.com"
        )
    
    elif text == "‚ÑπÔ∏è –û –Ω–∞—Å":
        await update.message.reply_text(
            "üë®‚Äçüíª –û –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:\n\n"
            "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π IT-—Ä–µ—à–µ–Ω–∏–π\n"
            "–ë–æ–ª–µ–µ 5 –ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ\n"
            "50+ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
        )
    
    elif text == "üÜò –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ '–£—Å–ª—É–≥–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
            "‚Ä¢ '–ö–æ–Ω—Ç–∞–∫—Ç—ã' - –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏\n"
            "‚Ä¢ '–û –Ω–∞—Å' - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏\n\n"
            "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"
        )
    
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            ["üéØ –£—Å–ª—É–≥–∏", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            ["‚ÑπÔ∏è –û –Ω–∞—Å", "üÜò –ü–æ–º–æ—â—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    
    elif text in ["ü§ñ –ë–æ—Ç—ã", "üåê –°–∞–π—Ç—ã", "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]:
        service_details = {
            "ü§ñ –ë–æ—Ç—ã": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–æ–≤ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API\n‚Ä¢ –ë–æ—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞",
            "üåê –°–∞–π—Ç—ã": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤:\n‚Ä¢ Landing pages\n‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã\n‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã",
            "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:\n‚Ä¢ iOS –∏ Android\n‚Ä¢ –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
            "üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞\n‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
        }
        
        detail_text = service_details.get(text, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ")
        detail_keyboard = [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º"]]
        reply_markup = ReplyKeyboardMarkup(detail_keyboard, resize_keyboard=True)
        await update.message.reply_text(detail_text, reply_markup=reply_markup)
    
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º":
        await handle_actions(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –∫ —É—Å–ª—É–≥–∞–º

def main():
    if not BOT_TOKEN:
        logging.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_actions))
    
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    application.run_polling()

if __name__ == "__main__":
    main()
