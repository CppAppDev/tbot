import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    
    keyboard = [["START"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "START":
        actions_keyboard = [
            ["üìä –£—Å–ª—É–≥–∏", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üë®‚Äçüíª –û –ø—Ä–æ–µ–∫—Ç–µ"]
        ]
        reply_markup = ReplyKeyboardMarkup(actions_keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    elif text == "üìä –£—Å–ª—É–≥–∏":
        await update.message.reply_text("–ù–∞—à–∏ —É—Å–ª—É–≥–∏...")
    
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã...")
    
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text("–ü–æ–º–æ—â—å...")
    
    elif text == "üë®‚Äçüíª –û –ø—Ä–æ–µ–∫—Ç–µ":
        await update.message.reply_text("–û –ø—Ä–æ–µ–∫—Ç–µ...")

def main():
    if not BOT_TOKEN:
        logging.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_actions))
    
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    application.run_polling()

if __name__ == "__main__":
    main()
