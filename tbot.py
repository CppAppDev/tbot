import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

BOT_TOKEN = os.getenv('BOT_TOKEN')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    
    welcome_text = f"""üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b> üåü

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ IT-—É—Å–ª—É–≥. 
–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ –º—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥–µ–º –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É:"""

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contacts")],
        [InlineKeyboardButton("üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")],
        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='HTML')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "services":
        services_text = """<b>üéØ –ù–∞—à–∏ IT-—É—Å–ª—É–≥–∏:</b>

‚Ä¢ ü§ñ <b>Telegram –±–æ—Ç—ã</b> - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞
‚Ä¢ üåê <b>–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞</b> - —Å–∞–π—Ç—ã –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è  
‚Ä¢ üì± <b>–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b> - iOS –∏ Android
‚Ä¢ üõ† <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> - —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ üí° <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b> - IT-–∞—É–¥–∏—Ç –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""

        services_keyboard = [
            [InlineKeyboardButton("ü§ñ –£–∑–Ω–∞—Ç—å –æ –±–æ—Ç–∞—Ö", callback_data="bot_details")],
            [InlineKeyboardButton("üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", callback_data="web_details")],
            [InlineKeyboardButton("üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data="app_details")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(services_keyboard)
        await query.edit_message_text(services_text, reply_markup=reply_markup, parse_mode='HTML')
    
    elif data == "contacts":
        contacts_text = """<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:</b>

üíå <b>Email:</b> hello@company.ru
üì± <b>Telegram:</b> @manager_name
üåê <b>–°–∞–π—Ç:</b> company.ru
üìç <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ü–Ω-–ü—Ç 9:00-18:00

<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º ‚Äî –æ–±—Å—É–¥–∏–º –≤–∞—à –ø—Ä–æ–µ–∫—Ç!</b>"""
        
        contacts_keyboard = [
            [InlineKeyboardButton("üíå –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ email", url="mailto:hello@company.ru")],
            [InlineKeyboardButton("üì± –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url="https://t.me/manager_name")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(contacts_keyboard)
        await query.edit_message_text(contacts_text, reply_markup=reply_markup, parse_mode='HTML')
    
    elif data == "portfolio":
        portfolio_text = """<b>üíº –ù–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b>

üìä <b>–ë–æ–ª–µ–µ 50 —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</b>

üéØ <b>–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç:</b>
‚Ä¢ E-commerce –±–æ—Ç —Å –æ–ø–ª–∞—Ç–æ–π - <b>+300%</b> –∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
‚Ä¢ –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - <b>50k+</b> —É—Å—Ç–∞–Ω–æ–≤–æ–∫
‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è <b>200+</b> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""

        portfolio_keyboard = [
            [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–µ–π—Å—ã", callback_data="cases")],
            [InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="reviews")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(portfolio_keyboard)
        await query.edit_message_text(portfolio_text, reply_markup=reply_markup, parse_mode='HTML')
    
    elif data == "faq":
        faq_text = """<b>‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>

<b>Q:</b> –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞?
<b>A:</b> –û—Ç 2 –Ω–µ–¥–µ–ª—å –¥–æ 3 –º–µ—Å—è—Ü–µ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

<b>Q:</b> –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?
<b>A:</b> Python, JavaScript, React, Node.js, PostgreSQL

<b>Q:</b> –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É?
<b>A:</b> –î–∞, –æ—Ç 1 –º–µ—Å—è—Ü–∞ –¥–æ 1 –≥–æ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""

        faq_keyboard = [
            [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(faq_keyboard)
        await query.edit_message_text(faq_text, reply_markup=reply_markup, parse_mode='HTML')
    
    elif data == "back_to_main":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        await start(update, context)

async def handle_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "bot_details":
        text = """<b>ü§ñ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram –±–æ—Ç–æ–≤:</b>

üéØ <b>–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º:</b>
‚Ä¢ –ë–æ—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞
‚Ä¢ –ß–∞—Ç-–±–æ—Ç—ã —Å AI
‚Ä¢ –ë–æ—Ç—ã –¥–ª—è e-commerce
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CRM –∏ API

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç 15 000 ‚ÇΩ
‚è± <b>–°—Ä–æ–∫–∏:</b> –æ—Ç 2 –Ω–µ–¥–µ–ª—å"""

    elif data == "web_details":
        text = """<b>üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</b>

üéØ <b>–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º:</b>
‚Ä¢ Landing pages
‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã
‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã
‚Ä¢ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç 25 000 ‚ÇΩ
‚è± <b>–°—Ä–æ–∫–∏:</b> –æ—Ç 3 –Ω–µ–¥–µ–ª—å"""

    keyboard = [
        [InlineKeyboardButton("üí¨ –û–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="contacts")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="services")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

def main():
    if not BOT_TOKEN:
        logging.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^(services|contacts|portfolio|faq|back_to_main|cases|reviews|ask_question)$"))
    application.add_handler(CallbackQueryHandler(handle_details, pattern="^(bot_details|web_details|app_details)$"))
    
    logging.info("üöÄ –ë–æ—Ç —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
